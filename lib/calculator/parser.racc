class Calculator::Parser

rule
  target: expression

  add : ADD DIGIT { puts "M add #{val.to_s}"; return val[1] }

  substract : SUBSTRACT DIGIT

  multiply : MULTIPLY DIGIT

  divide : DIVIDE DIGIT

  expression : DIGIT { @logger.debug "M DIGIT #{val.to_s}"; return val[0]}
  | DIGIT expression { @logger.debug "M #{val.to_s}"; return val[0] }
  | expression ADD DIGIT       { @logger.debug "M ADD #{val.to_s}"; return val[0] + val[2] }
  | expression SUBTRACT DIGIT  { @logger.debug "M SUB #{val.to_s}"; return val[0] - val[2] }
  | expression MULTIPLY DIGIT  { @logger.debug "M MUL #{val.to_s}"; return val[0] * val[2] }
  | expression DIVIDE DIGIT    { @logger.debug "M DIV #{val.to_s}"; return val[0] / val[2] }
end

---- header
  require_relative 'lexer'
  require 'logging'

---- inner ----
  def initialize
    @logger = Logging.logger[self]
  end

  attr_reader :log

  def parse(tokens)
    @tokens = tokens

    do_parse
  end

  def next_token
    @tokens.shift
  end
