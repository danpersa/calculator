#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.11
# from Racc grammer file "".
#

require 'racc/parser.rb'

  require_relative 'lexer'
  require 'logging'

module Calculator
  class Parser < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 27)
  def initialize
    @logger = Logging.logger[self]
  end

  attr_reader :log

  def parse(tokens)
    @tokens = tokens

    do_parse
  end

  def next_token
    @tokens.shift
  end
...end parser.racc/module_eval...
##### State transition tables begin ###

racc_action_table = [
     5,    11,     3,     7,     8,     6,     5,    10,     4,     7,
     8,     6,    12,    13,    14,     3 ]

racc_action_check = [
     9,     5,     3,     9,     9,     9,     2,     4,     1,     2,
     2,     2,     6,     7,     8,     0 ]

racc_action_pointer = [
    12,     8,     4,    -1,     7,    -2,     9,    10,    11,    -2,
   nil,   nil,   nil,   nil,   nil ]

racc_action_default = [
   -12,   -12,    -1,    -6,   -12,   -12,   -12,   -12,   -12,    -7,
    15,    -8,    -9,   -10,   -11 ]

racc_goto_table = [
     2,     1,   nil,     9 ]

racc_goto_check = [
     2,     1,   nil,     2 ]

racc_goto_pointer = [
   nil,     1,     0,   nil,   nil,   nil,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 9, :_reduce_none,
  2, 11, :_reduce_2,
  2, 12, :_reduce_none,
  2, 13, :_reduce_none,
  2, 14, :_reduce_none,
  1, 10, :_reduce_6,
  2, 10, :_reduce_7,
  3, 10, :_reduce_8,
  3, 10, :_reduce_9,
  3, 10, :_reduce_10,
  3, 10, :_reduce_11 ]

racc_reduce_n = 12

racc_shift_n = 15

racc_token_table = {
  false => 0,
  :error => 1,
  :ADD => 2,
  :DIGIT => 3,
  :SUBSTRACT => 4,
  :MULTIPLY => 5,
  :DIVIDE => 6,
  :SUBTRACT => 7 }

racc_nt_base = 8

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "ADD",
  "DIGIT",
  "SUBSTRACT",
  "MULTIPLY",
  "DIVIDE",
  "SUBTRACT",
  "$start",
  "target",
  "expression",
  "add",
  "substract",
  "multiply",
  "divide" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

module_eval(<<'.,.,', 'parser.racc', 5)
  def _reduce_2(val, _values, result)
     puts "M add #{val.to_s}"; return val[1] 
    result
  end
.,.,

# reduce 3 omitted

# reduce 4 omitted

# reduce 5 omitted

module_eval(<<'.,.,', 'parser.racc', 13)
  def _reduce_6(val, _values, result)
     @logger.debug "M DIGIT #{val.to_s}"; return val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 14)
  def _reduce_7(val, _values, result)
     @logger.debug "M #{val.to_s}"; return val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 15)
  def _reduce_8(val, _values, result)
     @logger.debug "M ADD #{val.to_s}"; return val[0] + val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 16)
  def _reduce_9(val, _values, result)
     @logger.debug "M SUB #{val.to_s}"; return val[0] - val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 17)
  def _reduce_10(val, _values, result)
     @logger.debug "M MUL #{val.to_s}"; return val[0] * val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 18)
  def _reduce_11(val, _values, result)
     @logger.debug "M DIV #{val.to_s}"; return val[0] / val[2] 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Calculator
